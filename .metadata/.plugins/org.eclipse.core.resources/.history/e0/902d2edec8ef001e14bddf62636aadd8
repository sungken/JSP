
서버측 + 웹 기술
- Sevelet
- JSP
- Spring
-------------
데이터 베이스 연동
- JDBC
- MyBatis
- Spring JDBC
- JPA



웹 페이지
1. 정적 페이지 > 요청때 마다 소스가 변함 없는 페이지
2. 동적 페이지 > 요청때 마다 소스가 변함 있는 페이지


Sevelet, 서블릿
- 웹서버에서 자바를 사용한 프로그램을 동작시키는 기술
- 프로그램의 역할 > 웹 페이지 생성
- 웹서버 쪽에서 동적으로 웹 페이지를 생산하는 기술

Servlet Class
- 바리스타(알바생)
- 클라이언트(브라우저) 요청에 따라 동적으로 웹페이지를 생산하는 클래스


Servet/JSP Conrainer <== Servet/JSP Engine
- 서버측에서 Servlet/JSP를 실행할 수 있도록 해주는 환경
- Servlet/JSP와 관련된 객체 생성, 실행, 소며 등.. 전반적인 관리
- 대표 컨테이너 > 톰캣(Tomcat)

Servlet Class 작성 규칙
1. 서블릿 클래스 선언 > 순수 자바(X), 서블릿 API 사용(O)
	- javax.servlet.Servlet 인터페이스를 구현한다. > 복잡함, 고비용
	- javax.servlet.http.HttpServlet 클래스를 상속 받는다. > 단순함, 저비용(*** 많이 쓰임)

2. doGet/doPost 메소드 선언
	- 둘중 하나 선언 or 둘 다 선언
	- 클라이언트(브라우저)의 요청이 들어오면 자동으로 호출되는 메소드 > "주문"
	- 커피를 만드는 메소드 > HTML 페이지를 만드는 메소드
	- 메소드 작성 규칙
		1) 매개변수 작성
			1. java.servlet.http.HttpServletRequest
			2. java.servlet.http.HttpServletResponse
			
		2) 예외 미루기
			1. java.io.IOException
			2. java.servlet.ServletException			
	
3. 동적 HTML 페이지 작성
	- doGet/doPost 내부에서 HTML 문서를 작성하기 위한 자바 코드를 작성한다.(개발자) > 미리 계획를 작성한다.
	- HttpServletResponse 객체의 getWriter() 메소드 호출 > PrintWriter 객체 반환
	- PrintWriter 객체 == 페이지를 제작하는 도구
	- printXXX("페이지 태그 or 내용"); > 동적으로 페이지 제작
	- 페이지 완성 > 브라우저에게 반환
	
4. 서블릿 호출
	- 순수 자바는 웹 기술이 아니다. > 웹에서는 자바 프로그램을 호출할 수 없다.
	- 톰캣이 그 요청을 받아서 대신 자바 프로그램을 호출한다.














